// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from muse_file.djinni

#import "Muse/api/IXNAnnotationData.h"
#import "Muse/api/IXNComputingDeviceConfiguration.h"
#import "Muse/api/IXNDspData.h"
#import "Muse/api/IXNMessageType.h"
#import "Muse/api/IXNMuseArtifactPacket.h"
#import "Muse/api/IXNResult.h"
#import <Foundation/Foundation.h>
@class IXNMuseConfiguration;
@class IXNMuseDataPacket;
@class IXNMuseFileReader;
@class IXNMuseVersion;
@protocol IXNMuseFile;


/**
 * Reads a .muse file formatted according to the %Muse protobuf schema.
 * For information about the .muse file format see: http://developer.choosemuse.com/file-formats/muse
 * <p>
 * \classlink{MuseFileReader} is very similar to \classlink{ReaderMuse} as both classes
 * allow you to parse a file and generate data packets from it.  In most instances, \classlink{ReaderMuse}
 * is the better choice at it abstracts the details of the parsing of the file and allows you to handle
 * the data the same way that you would if you were connected to an actual \classlink{Muse}.  Use
 * \classlink{MuseFileReader} if you want finer control of the parsing of the file.
 * <p>
 * When the file reader is created it always starts reading from the beginning
 * of the file to the end.<br>
 *
 * <B>Threading:</B> It is NOT thread safe, you have to provide your own
 * synchronization mechanism if you plan to calls methods of this class from
 * different threads.
 * \if WINDOWS_ONLY
 * Make sure you do not call these methods from the main UI thread. Please use
 * an async task instead to avoid crashes.
 * \endif
 */
@interface IXNMuseFileReader : NSObject

/**
 * Returns an instance of file reader. Automatically opens a file. <br>
 * \return a \classlink{MuseFileReader} instance.
 */
+ (nullable IXNMuseFileReader *)getFileReader:(nullable id<IXNMuseFile>)file;

/**
 * Opens an existing file
 * Use this method if you explicitly closed file and want to open it again.
 * Calls \functionlink{MuseFile,open,open}.
 */
- (BOOL)open;

/**
 * Closes the file. Calls \functionlink{MuseFile,close,close}.
 * You don't have to call close explicitly unless you want to close file
 * immediately. close is called automatically, when the file reader object
 * is destroyed.
 */
- (BOOL)close;

/**
 * Reads the next message in the protobuf stream.<br>
 * \return The \classlink{Result} object with the status of the read operation.
 */
- (nonnull IXNResult *)gotoNextMessage;

/**
 * Returns the type of message at the current position in the file.
 * \return The type of message at the current position in the file.
 */
- (IXNMessageType)getMessageType;

/**
 * Returns the id of the message at the current position in the file or
 * \c -1 if the id isn't found in the protobuf specification.
 * \return The id of the message at the current position in the file or
 * \c -1 if the id isn't found in the protobuf specification.
 */
- (int32_t)getMessageId;

/**
 * Returns the timestamp of the message at the current position in the file.
 * \return The timestamp of the message.
 */
- (int64_t)getMessageTimestamp;

/**
 * Returns annotation data at the current position in the file.
 * \return The annotation data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not
 * \enumlink{MessageType,ANNOTATION,IXNMessageTypeAnnotation}
 */
- (nonnull IXNAnnotationData *)getAnnotation;

/**
 * Returns muse configuration data at the current position in the file.
 * \return The configuration data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not
 * \enumlink{MessageType,CONFIGURATION,IXNMessageTypeConfiguration}
 */
- (nullable IXNMuseConfiguration *)getConfiguration;

/**
 * Returns muse version data at the current position in the file.
 * \return The version data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not
 * \enumlink{MessageType,VERSION,IXNMessageTypeVersion}
 */
- (nullable IXNMuseVersion *)getVersion;

/**
 * Returns computing device configuration data at the current position in the file.
 * \return The device configuration data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not
 * \enumlink{MessageType,COMPUTING_DEVICE,IXNMessageTypeComputingDevice}
 */
- (nonnull IXNComputingDeviceConfiguration *)getComputingDeviceConfiguration;

/**
 * Returns the dsp data at the current position in the file.
 * \return The dsp data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not
 * \enumlink{MessageType,DSP,IXNMessageTypeDsp}
 */
- (nonnull IXNDspData *)getDsp;

/**
 * Returns the muse data packet data at the current position in the file.
 * Use this method to get EEG, %Accelerometer, %Battery and Quantization packets.
 * \return The muse data packet data at the current position in the file.
 * \exception IncorrectMessageType If current message type is not one of:<br>
 * \enumlink{MessageType,ACCELEROMETER,IXNMessageTypeAccelerometer},<br>
 * \enumlink{MessageType,ACC_DROPPED,IXNMessageTypeAccDropped},<br>
 * \enumlink{MessageType,BATTERY,IXNMessageTypeBattery},<br>
 * \enumlink{MessageType,EEG,IXNMessageTypeEeg},<br>
 * \enumlink{MessageType,EEG_DROPPED,IXNMessageTypeEegDropped},<br>
 * \enumlink{MessageType,GYRO,IXNMessageTypeGyro},<br>
 * \enumlink{MessageType,MUSE_ELEMENTS,IXNMessageTypeMuseElements} or<br>
 * \enumlink{MessageType,QUANTIZATION,IXNMessageTypeQuantization}
 */
- (nullable IXNMuseDataPacket *)getDataPacket;

/**
 * Returns the muse artifact packet data at the current position in the file.
 * \return The muse artifact packet at the current position in the file.
 * \exception IncorrectMessageType If current message type is not
 * \enumlink{MessageType,ARTIFACT,IXNMessageTypeArtifact},<br>
 */
- (nonnull IXNMuseArtifactPacket *)getArtifactPacket;

@end
