// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from museinfo.djinni

#import "Muse/api/IXNMuseModel.h"
#import "Muse/api/IXNMusePreset.h"
#import "Muse/api/IXNNotchFrequency.h"
#import <Foundation/Foundation.h>


/**
 * Encapsulates the configuration information of the Muse headband.<br>
 *
 * You must connect to the headband at least once to before this information
 * is available.  Once you have connected once the information will remain
 * available, even after you disconnect.
 */
@interface IXNMuseConfiguration : NSObject

/** Provides access to current preset. */
- (IXNMusePreset)getPreset;

/**
 * The name of the headband. This is only available on \muse2016.
 * \return The name of the headband.
 */
- (nonnull NSString *)getHeadbandName;

/**
 * Unique 96 bit ID identifying the microcontroller on the headband.
 * This is only available on \muse2016.
 * \return The id of the microcontroller.
 */
- (nonnull NSString *)getMicrocontrollerId;

/**
 * Number of channels currently active.
 * \return The number of EEG channels currently active.
 */
- (int32_t)getEegChannelCount;

/**
 * Gain to apply to incoming EEG samples.
 * \return The gain that should be applied to incoming EEG samples.
 */
- (int32_t)getAfeGain;

/**
 * EEG downsampling rate.  A value of -1 means "unknown".
 * \return The EEG downsampling rate.
 */
- (int32_t)getDownsampleRate;

/**
 * Serial output mode. The relates to the size of the EEG packets transmitted
 * from the headband.  A value of 2 indicates that the packet data is
 * compressed (10 bits).  A value of 3 indicates that the packet data is
 * uncompressed (16 bits).  A value of -1 means "unknown".
 * \return \c 2 if the data is compressed, \c 3 if the data is uncompressed
 * or \c -1 if this value is unknown.
 */
- (int32_t)getSeroutMode;

/**
 * The output frequency of EEG packets in Hz.
 * \return The output frequency of EEG packets.
 */
- (int32_t)getOutputFrequency;

/**
 * The sample frequency of EEG packets (ADC) in Hz.  A value of -1 means "unknown".
 * \return The ADC frequency of the headband.
 */
- (int32_t)getAdcFrequency;

/**
 * Provides information about notch filter state (on/off).
 * \return \c true if the notch filter is enabled.  \c false if it is not.
 */
- (BOOL)getNotchFilterEnabled;

/**
 * Provides information about notch filter frequency (50Hz/60Hz).
 * \return The frequency of the notch filter.
 */
- (IXNNotchFrequency)getNotchFilter;

/**
 * Returns accelerometer sample frequency in Hz.
 * \return The frequency of accelerometer samples.
 */
- (int32_t)getAccelerometerSampleFrequency;

/**
 * Provides information about battery data transmission state (on/off).
 * \return \c true if the battery data transmission is enabled.
 * \c false if it is not.
 */
- (BOOL)getBatteryDataEnabled;

/**
 * Provides information about DRL/REF transmission state (on/off).
 * \return \c true if the DRL/REF data transmission is enabled.  \c false
 * if it is not.
 */
- (BOOL)getDrlRefEnabled;

/**
 * DRL/REF data output frequency in Hz.
 * 0 if DRL/REF is not enabled.
 * \return The frequency at which DRL/REF packets are transmitted.
 */
- (int32_t)getDrlRefFrequency;

/**
 * Returns battery charge remaining in percent.
 * \return The percentage of battery remaining.
 */
- (double)getBatteryPercentRemaining;

/**
 * Bluetooth MAC address reported by device.
 * \return The MAC address of the headband.
 */
- (nonnull NSString *)getBluetoothMac;

/**
 * Serial number reported by device.
 * \return The device serial number.
 */
- (nonnull NSString *)getSerialNumber;

/**
 * The headband model
 * \return The model of the headband.
 */
- (IXNMuseModel)getModel;

@end
