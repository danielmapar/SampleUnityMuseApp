// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from muse_file.djinni

#import <Foundation/Foundation.h>


/**
 * A File interface.  Normally you will not need to use this class directly as you can
 * get a \classlink{MuseFileReader} or \classlink{MuseFileWriter} using
 * \classlink{MuseFileFactory}.<br>
 * If you provide
 * your own implementation of this class, you should provide a way to specify the
 * path to the file you want to access in a platform specific way.<br>
 *
 * <B>Threading:</B>
 * \classlink{MuseFile} is not thread safe by default, but \classlink{MuseFileWriter}
 * provides the necessary synchronization for its usage.  If you are using \classlink{MuseFile}
 * outside of that context, make sure the calls to the
 * \functionlink{MuseFile,open,open},
 * \functionlink{MuseFile,write,write} and
 * \functionlink{MuseFile,close,close}
 * functions are thread-safe.
 * \if WINDOWS_ONLY
 * Specifically, make sure you do not call these methods on the main UI thread.
 * Please use an async task instead in order to avoid crashes.
 * \endif
 */
@protocol IXNMuseFile

/**
 * Opens/creates the file.  You can open same file for both writing and
 * reading if you really (!) have to do so. Provide synchronization in
 * this case.
 * This method is called automatically when \classlink{MuseFileWriter}
 * or \classlink{MuseFileReader} is created.
 * \caseparam{forWriting, for_writing, \c true if the file should be opened for writing. \c false if for reading.}
 * \return \c true when file is opened successfully, \c false otherwise.
 */
- (BOOL)open:(BOOL)forWriting;

/**
 * Writes buffer to file. <br>
 * This method is called when you flush \classlink{MuseFileWriter}.
 *
 * \param buffer The data to write.
 * \return \c true when buffer is written to successfully, \c false otherwise.
 */
- (BOOL)write:(nonnull NSData *)buffer;

/**
 * Reads "length" bytes from file starting from current pointer position.
 * \param length The number of bytes to read.
 * \return A byte array containing the data read.  An empty buffer is returned if
 * the file is empty or if the end of file was reached.
 */
- (nonnull NSData *)read:(int32_t)length;

/**
 * Closes opened file. <br>
 * This method is called when \classlink{MuseFileWriter} or \classlink{MuseFileReader}
 * is destroyed, or when close is called on either class.
 * \caseparam{forWriting, for_writing, \c true if the file should be closed for writing. \c false if for reading.}
 * \return \c true if file is closed properly, \c false otherwise.
 */
- (BOOL)close:(BOOL)forWriting;

@end
