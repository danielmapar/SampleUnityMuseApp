// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from sdk_bridge.djinni

#import "Muse/api/IXNReaderMusePlaybackSettings.h"
#import <Foundation/Foundation.h>
@class IXNMuse;
@protocol IXNReaderListener;
@protocol IXNReaderPlaybackListener;


/**
 * A \classlink{Muse} associated with a \classlink{MuseFileReader}.
 * <p>
 * This interface can be used to play back packets from a .muse file so that they can be handled
 * the same way that you would handle data from an actual \classlink{Muse}.  Details of the parsing
 * are abstracted and you will simply receive data packets with the data that is read.
 * <p>
 * When you use this class, register \classlink{MuseDataListener}
 * for the data packets you would like to receive by calling
 * \inlinelink{ReaderMuse.asMuse(),::IXNReaderMuse::asMuse:,ReaderMuse::as_muse()}
 *  then
 * \inlinelink{Muse.registerDataListener(),::IXNMuse::registerDataListener:type:,Muse::register_data_listener()} .
 *
 * \sa \classlink{ReaderMuseBuilder}
 * \sa \classlink{ReaderMusePlaybackSettings}
 * \sa \classlink{ReaderPlaybackListener}
 */
@interface IXNReaderMuse : NSObject

/**
 * Run through all packets in the file, calling each listener for each
 * packet as appropriate.
 *
 * This only works once; the file is not rewound on subsequent calls. If you
 * want to play a file again, create another \classlink{ReaderMuse}
 *
 * \deprecated Use \inlinelink{playback(),IXNReaderMuse::playback:,playback()}
 *  with the playback setting
 * \enumlink{ReaderMusePlaybackSettings,AS_FAST_AS_POSSIBLE_WITH_SAVED_TIMESTAMP,IXNReaderMusePlaybackSettingsAsFastAsPossibleWithSavedTimestamp}
 * to replicate this behaviour.
 */
- (void)run;

/**
 * Run through all packets in the file, calling each listener for each
 * packet as appropriate in 1:1 timespan
 *
 *
 * This only works once; the file is not rewound on subsequent calls. If you
 * want to play a file again, create another \classlink{ReaderMuse}
 * \deprecated Use \inlinelink{playback(),IXNReaderMuse::playback:,playback()}
 * with the playback setting
 * \enumlink{ReaderMusePlaybackSettings,SIMULATED_WITH_SAVED_TIMESTAMP,IXNReaderMusePlaybackSettingsSimulatedWithSavedTimestamp}
 * to replicate this behaviour.
 */
- (void)runInRealTimespan;

/**
 * Corresponds to the timestamp field for the last packet read.
 *
 * This does not change within a given listener's body.
 *
 * \return The timestamp of the last packet read.
 */
- (int64_t)currentTime;

/**
 * Play back the \classlink{MuseFile}
 * and call each listener for each packet as appropriate.
 * <br>
 *
 * The speed of the playback is controlled by the playback settings.
 * Simulated playback settings require the \classlink{ReaderMuse}
 * to be constructed with an \classlink{EventLoop}
 * to simulate the time between packets.  Calling playback without an
 * \classlink{EventLoop}
 * will not playback the file and will log a warning.
 * <br>
 *
 * This only works once; the file is not rewound on subsequent calls. If you
 * want to play a file again, create another \classlink{ReaderMuse}
 *
 * \sa \classlink{ReaderMusePlaybackSettings}
 */
- (void)playback;

/**
 * Sets the settings to use when playing back a file with this
 * \classlink{ReaderMuse}.
 *
 * \param settings The settings to use for playback.
 */
- (void)setPlaybackSettings:(IXNReaderMusePlaybackSettings)settings;

/**
 * Returns the settings that will be used when playing back a file with this
 * \classlink{ReaderMuse}.
 *
 * \return The settings that will be used to play back the file.
 */
- (IXNReaderMusePlaybackSettings)getPlaybackSettings;

/**
 * Set a listener to receive annotations, version, and configuration
 * packets.
 * \param listener The listener for annotation, version and configuration
 * packets.
 */
- (void)setReaderListener:(nullable id<IXNReaderListener>)listener;

/**
 * Set a listener to receive events related to playback. For example when
 * playback has finished successfully or was interrupted due to error.
 * \param listener The playback listener to receive callbacks.
 */
- (void)setPlaybackListener:(nullable id<IXNReaderPlaybackListener>)listener;

/**
 * Downcast to \classlink{Muse}
 *
 * Note that most of the API of the returned Muse is stubbed and will cause
 * assert failures if called in debug mode. The methods that are implemented
 * are:
 *   - isLowEnergy / is_low_energy
 *   - enableDataTransmission / enable_data_transmission
 *   - register*
 *   - unregister*<br>
 *
 * Note that the only listener that will ever receive packets from a
 * \classlink{ReaderMuse} is \classlink{MuseDataListener}.
 */
- (nullable IXNMuse *)asMuse;

@end
